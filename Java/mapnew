import lejos.nxt.Button;
import lejos.nxt.Motor;
import lejos.nxt.SensorPort;
import lejos.nxt.UltrasonicSensor;
import lejos.nxt.TouchSensor;

public class MapSystem {
	
	final int[] wallDist = {175,125};		//wall to wall distance from robots point of view
	final int[] limit = {6,4}; 				//highest coordinates
	final int robotSize = 25;				//size of robot
	
	int[][] map = new int[5][7]; 			//map to be completed
	int[] position = {0,0};					//robots position
	int i = 0;								//counter to be used for position, limit, wallDist
	
	int heading = 1;			//plus or minus 1 depending on which direction the robot is facing
	int direction = 1;			//direction 1-4 of where the robot is facing
	
    //variables added to compile successfully
    boolean turned;
    int dest;
    
    
	UltrasonicSensor us = new UltrasonicSensor(SensorPort.S4);
    MapSystem() {
	
        us.continuous();

        int dest = us.getDistance();	//distance to destination is distance from sonar
        while (dest > 180) {			//get correct distance (to account for 255 error)
            dest = us.getDistance();			
        }
    }
    

    boolean scanAhead() {
		dest = us.getDistance();
		updateMap(dest);
		if(dest < robotSize) {
			return true;
		} else {
			return false;
		}
	}
	
    void updatePosition() {
		if(heading = -1) {
			position[i]--;
		} else {
			position[i]++;
		}
	}
    
    
	/* How the map system recognises a 
	 * right turn
	 */
	void rightTurn() {
		if (direction == 4){		//if max direction
			direction = 1;		//reset
		} else {
			direction++;		//change direction
		}
		
		if (direction < 3) {	//if facing forward
			heading = 1;			
		} else  {
			heading = -1;
		}
		
		turned = !turned;
		
		if(turned) {
			i = 1;		//y is 0 and x is 1
		} else {
			i = 0;
		}
	}
	
	/* How the map system recognises a 
	 * right turn
	 */
	void leftTurn() {
		if (direction == 1){
			direction = 4;
		} else {
			direction--;
		}
		
		if (direction < 3) {
			heading = 1;
		} else  {
			heading = -1;
		}
		
		if(turned) {
			i = 1;		
		} else {
			i = 0;
		}
	}
	
	
	/* Calculates the distance in coordinates
	 * to obstacle, then the actual coordinate
	 * of the obstacle then puts it into the
	 * map using updateBlock().
	 */
	void updateMap(int dest) {
	
	if (dest < robotSize) {
	
		if (i = 1) {											//if x axis
			map[position[0]][position[1] + heading] = 1;		//update map
		} else if (i = 0) {										//if y axis
			map[position[0] + heading][position[1]] = 1;
		}	
		
	} else {
		
		if (i = 1) {											//if x axis
			map[position[0]][position[1] + heading] = -1;		//update map
		} else if (i = 0) {										//if y axis
			map[position[0] + heading][position[1]] = -1;
		}
		
	}
}	
}
